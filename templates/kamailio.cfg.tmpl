#!KAMAILIO
#### Global ####
debug=2
log_stderror=no
fork=yes
children=8
mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules/"

# Listen / Advertise
listen=udp:__LISTEN_ADDR__:__LISTEN_PORT__
__ADVERTISE_LINE__

#### Modules ####
# Core routing helpers
loadmodule "sl.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "rr.so"
loadmodule "sanity.so"
loadmodule "maxfwd.so"
loadmodule "pv.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"

# Carrier IP/CIDR checks
loadmodule "ipops.so"

# JSON-RPC server so `kamcmd` can manage mtree (FIFO transport)
loadmodule "jsonrpcs.so"
modparam("jsonrpcs", "fifo_name", "/run/kamailio/kamailio_rpc.fifo")

# Longest-prefix map kept in memory; populated via `kamcmd mtree.add`
loadmodule "mtree.so"
modparam("mtree", "mtree", "name=dest")

#### Routing ####
request_route {
    if (!sanity_check("1777","7")) exit;
    if (!mf_process_maxfwd_header("10")) { sl_send_reply("483","Too Many Hops"); exit; }

    # Liveness
    if (is_method("OPTIONS") && uri==myself) { sl_send_reply("200","OK"); exit; }

    if (is_method("INVITE")) {
        # Carrier allowlist (rendered from .env at install)
        if (!( __CARRIER_EXPR__ )) {
            xlog("L_WARN","Blocked INVITE from $si\n");
            sl_send_reply("403","Forbidden");
            exit;
        }

        if ($rU == $null || $rU == "") { sl_send_reply("484","Address Incomplete"); exit; }

        # Expect E.164; keep '+' and digits only
        $var(dst) = $(rU{s.gsub,([^+0-9]),,g});

        # Lookup â†’ "f1" | "f2" from mtree 'dest'
        $var(target) = mt_match("dest", "$var(dst)");
        if ($var(target) == $null || $var(target) == "") {
            xlog("L_NOTICE","No mtree match for $var(dst)\n");
            sl_send_reply("404","No route");
            exit;
        }

        if ($var(target) == "f1") {
            $du = "sip:__F1_HOST__:5060;transport=udp";
        } else if ($var(target) == "f2") {
            $du = "sip:__F2_HOST__:5060;transport=udp";
        } else {
            xlog("L_ERR","Unknown mtree target '$var(target)'\n");
            sl_send_reply("500","Server Misconfig");
            exit;
        }

        record_route();
        if (!t_relay()) sl_reply_error();
        exit;
    }

    sl_send_reply("405","Method Not Allowed"); exit;
}
